// Copyright 2024 The NATS Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1beta2

import (
	"context"

	v1beta2 "github.com/nats-io/nack/pkg/jetstream/apis/jetstream/v1beta2"
	jetstreamv1beta2 "github.com/nats-io/nack/pkg/jetstream/generated/applyconfiguration/jetstream/v1beta2"
	scheme "github.com/nats-io/nack/pkg/jetstream/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ConsumersGetter has a method to return a ConsumerInterface.
// A group's client should implement this interface.
type ConsumersGetter interface {
	Consumers(namespace string) ConsumerInterface
}

// ConsumerInterface has methods to work with Consumer resources.
type ConsumerInterface interface {
	Create(ctx context.Context, consumer *v1beta2.Consumer, opts v1.CreateOptions) (*v1beta2.Consumer, error)
	Update(ctx context.Context, consumer *v1beta2.Consumer, opts v1.UpdateOptions) (*v1beta2.Consumer, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, consumer *v1beta2.Consumer, opts v1.UpdateOptions) (*v1beta2.Consumer, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta2.Consumer, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta2.ConsumerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta2.Consumer, err error)
	Apply(ctx context.Context, consumer *jetstreamv1beta2.ConsumerApplyConfiguration, opts v1.ApplyOptions) (result *v1beta2.Consumer, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, consumer *jetstreamv1beta2.ConsumerApplyConfiguration, opts v1.ApplyOptions) (result *v1beta2.Consumer, err error)
	ConsumerExpansion
}

// consumers implements ConsumerInterface
type consumers struct {
	*gentype.ClientWithListAndApply[*v1beta2.Consumer, *v1beta2.ConsumerList, *jetstreamv1beta2.ConsumerApplyConfiguration]
}

// newConsumers returns a Consumers
func newConsumers(c *JetstreamV1beta2Client, namespace string) *consumers {
	return &consumers{
		gentype.NewClientWithListAndApply[*v1beta2.Consumer, *v1beta2.ConsumerList, *jetstreamv1beta2.ConsumerApplyConfiguration](
			"consumers",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1beta2.Consumer { return &v1beta2.Consumer{} },
			func() *v1beta2.ConsumerList { return &v1beta2.ConsumerList{} }),
	}
}
