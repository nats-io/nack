// Copyright 2025 The NATS Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

// ConnectionOptsApplyConfiguration represents a declarative configuration of the ConnectionOpts type for use
// with apply.
type ConnectionOptsApplyConfiguration struct {
	Account  *string                `json:"account,omitempty"`
	Creds    *string                `json:"creds,omitempty"`
	Nkey     *string                `json:"nkey,omitempty"`
	Servers  []string               `json:"servers,omitempty"`
	TLS      *TLSApplyConfiguration `json:"tls,omitempty"`
	TLSFirst *bool                  `json:"tlsFirst,omitempty"`
	JsDomain *string                `json:"jsDomain,omitempty"`
}

// ConnectionOptsApplyConfiguration constructs a declarative configuration of the ConnectionOpts type for use with
// apply.
func ConnectionOpts() *ConnectionOptsApplyConfiguration {
	return &ConnectionOptsApplyConfiguration{}
}

// WithAccount sets the Account field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Account field is set to the value of the last call.
func (b *ConnectionOptsApplyConfiguration) WithAccount(value string) *ConnectionOptsApplyConfiguration {
	b.Account = &value
	return b
}

// WithCreds sets the Creds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Creds field is set to the value of the last call.
func (b *ConnectionOptsApplyConfiguration) WithCreds(value string) *ConnectionOptsApplyConfiguration {
	b.Creds = &value
	return b
}

// WithNkey sets the Nkey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Nkey field is set to the value of the last call.
func (b *ConnectionOptsApplyConfiguration) WithNkey(value string) *ConnectionOptsApplyConfiguration {
	b.Nkey = &value
	return b
}

// WithServers adds the given value to the Servers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Servers field.
func (b *ConnectionOptsApplyConfiguration) WithServers(values ...string) *ConnectionOptsApplyConfiguration {
	for i := range values {
		b.Servers = append(b.Servers, values[i])
	}
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *ConnectionOptsApplyConfiguration) WithTLS(value *TLSApplyConfiguration) *ConnectionOptsApplyConfiguration {
	b.TLS = value
	return b
}

// WithTLSFirst sets the TLSFirst field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLSFirst field is set to the value of the last call.
func (b *ConnectionOptsApplyConfiguration) WithTLSFirst(value bool) *ConnectionOptsApplyConfiguration {
	b.TLSFirst = &value
	return b
}

// WithJsDomain sets the JsDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JsDomain field is set to the value of the last call.
func (b *ConnectionOptsApplyConfiguration) WithJsDomain(value string) *ConnectionOptsApplyConfiguration {
	b.JsDomain = &value
	return b
}
