// Copyright 2025 The NATS Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

import (
	jetstreamv1beta2 "github.com/nats-io/nack/pkg/jetstream/apis/jetstream/v1beta2"
)

// StreamSpecApplyConfiguration represents a declarative configuration of the StreamSpec type for use
// with apply.
type StreamSpecApplyConfiguration struct {
	Name                   *string                             `json:"name,omitempty"`
	Description            *string                             `json:"description,omitempty"`
	Subjects               []string                            `json:"subjects,omitempty"`
	Retention              *string                             `json:"retention,omitempty"`
	MaxConsumers           *int                                `json:"maxConsumers,omitempty"`
	MaxMsgsPerSubject      *int                                `json:"maxMsgsPerSubject,omitempty"`
	MaxMsgs                *int                                `json:"maxMsgs,omitempty"`
	MaxBytes               *int                                `json:"maxBytes,omitempty"`
	MaxAge                 *string                             `json:"maxAge,omitempty"`
	MaxMsgSize             *int                                `json:"maxMsgSize,omitempty"`
	Storage                *string                             `json:"storage,omitempty"`
	Discard                *string                             `json:"discard,omitempty"`
	Replicas               *int                                `json:"replicas,omitempty"`
	NoAck                  *bool                               `json:"noAck,omitempty"`
	DuplicateWindow        *string                             `json:"duplicateWindow,omitempty"`
	Placement              *StreamPlacementApplyConfiguration  `json:"placement,omitempty"`
	Mirror                 *StreamSourceApplyConfiguration     `json:"mirror,omitempty"`
	Sources                []*jetstreamv1beta2.StreamSource    `json:"sources,omitempty"`
	Compression            *string                             `json:"compression,omitempty"`
	SubjectTransform       *SubjectTransformApplyConfiguration `json:"subjectTransform,omitempty"`
	RePublish              *RePublishApplyConfiguration        `json:"republish,omitempty"`
	Sealed                 *bool                               `json:"sealed,omitempty"`
	DenyDelete             *bool                               `json:"denyDelete,omitempty"`
	DenyPurge              *bool                               `json:"denyPurge,omitempty"`
	AllowDirect            *bool                               `json:"allowDirect,omitempty"`
	AllowRollup            *bool                               `json:"allowRollup,omitempty"`
	MirrorDirect           *bool                               `json:"mirrorDirect,omitempty"`
	DiscardPerSubject      *bool                               `json:"discardPerSubject,omitempty"`
	FirstSequence          *uint64                             `json:"firstSequence,omitempty"`
	Metadata               map[string]string                   `json:"metadata,omitempty"`
	ConsumerLimits         *ConsumerLimitsApplyConfiguration   `json:"consumerLimits,omitempty"`
	AllowMsgTTL            *bool                               `json:"allowMsgTtl,omitempty"`
	SubjectDeleteMarkerTTL *string                             `json:"subjectDeleteMarkerTtl,omitempty"`
	AllowMsgCounter        *bool                               `json:"allowMsgCounter,omitempty"`
	AllowAtomicPublish     *bool                               `json:"allowAtomicPublish,omitempty"`
	AllowMsgSchedules      *bool                               `json:"allowMsgSchedules,omitempty"`
	PersistMode            *string                             `json:"persistMode,omitempty"`
}

// StreamSpecApplyConfiguration constructs a declarative configuration of the StreamSpec type for use with
// apply.
func StreamSpec() *StreamSpecApplyConfiguration {
	return &StreamSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithName(value string) *StreamSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithDescription(value string) *StreamSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithSubjects adds the given value to the Subjects field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subjects field.
func (b *StreamSpecApplyConfiguration) WithSubjects(values ...string) *StreamSpecApplyConfiguration {
	for i := range values {
		b.Subjects = append(b.Subjects, values[i])
	}
	return b
}

// WithRetention sets the Retention field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Retention field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithRetention(value string) *StreamSpecApplyConfiguration {
	b.Retention = &value
	return b
}

// WithMaxConsumers sets the MaxConsumers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxConsumers field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMaxConsumers(value int) *StreamSpecApplyConfiguration {
	b.MaxConsumers = &value
	return b
}

// WithMaxMsgsPerSubject sets the MaxMsgsPerSubject field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxMsgsPerSubject field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMaxMsgsPerSubject(value int) *StreamSpecApplyConfiguration {
	b.MaxMsgsPerSubject = &value
	return b
}

// WithMaxMsgs sets the MaxMsgs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxMsgs field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMaxMsgs(value int) *StreamSpecApplyConfiguration {
	b.MaxMsgs = &value
	return b
}

// WithMaxBytes sets the MaxBytes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxBytes field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMaxBytes(value int) *StreamSpecApplyConfiguration {
	b.MaxBytes = &value
	return b
}

// WithMaxAge sets the MaxAge field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxAge field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMaxAge(value string) *StreamSpecApplyConfiguration {
	b.MaxAge = &value
	return b
}

// WithMaxMsgSize sets the MaxMsgSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxMsgSize field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMaxMsgSize(value int) *StreamSpecApplyConfiguration {
	b.MaxMsgSize = &value
	return b
}

// WithStorage sets the Storage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Storage field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithStorage(value string) *StreamSpecApplyConfiguration {
	b.Storage = &value
	return b
}

// WithDiscard sets the Discard field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Discard field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithDiscard(value string) *StreamSpecApplyConfiguration {
	b.Discard = &value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithReplicas(value int) *StreamSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithNoAck sets the NoAck field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NoAck field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithNoAck(value bool) *StreamSpecApplyConfiguration {
	b.NoAck = &value
	return b
}

// WithDuplicateWindow sets the DuplicateWindow field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DuplicateWindow field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithDuplicateWindow(value string) *StreamSpecApplyConfiguration {
	b.DuplicateWindow = &value
	return b
}

// WithPlacement sets the Placement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Placement field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithPlacement(value *StreamPlacementApplyConfiguration) *StreamSpecApplyConfiguration {
	b.Placement = value
	return b
}

// WithMirror sets the Mirror field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mirror field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMirror(value *StreamSourceApplyConfiguration) *StreamSpecApplyConfiguration {
	b.Mirror = value
	return b
}

// WithSources adds the given value to the Sources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sources field.
func (b *StreamSpecApplyConfiguration) WithSources(values ...**jetstreamv1beta2.StreamSource) *StreamSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSources")
		}
		b.Sources = append(b.Sources, *values[i])
	}
	return b
}

// WithCompression sets the Compression field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Compression field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithCompression(value string) *StreamSpecApplyConfiguration {
	b.Compression = &value
	return b
}

// WithSubjectTransform sets the SubjectTransform field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SubjectTransform field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithSubjectTransform(value *SubjectTransformApplyConfiguration) *StreamSpecApplyConfiguration {
	b.SubjectTransform = value
	return b
}

// WithRePublish sets the RePublish field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RePublish field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithRePublish(value *RePublishApplyConfiguration) *StreamSpecApplyConfiguration {
	b.RePublish = value
	return b
}

// WithSealed sets the Sealed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Sealed field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithSealed(value bool) *StreamSpecApplyConfiguration {
	b.Sealed = &value
	return b
}

// WithDenyDelete sets the DenyDelete field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DenyDelete field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithDenyDelete(value bool) *StreamSpecApplyConfiguration {
	b.DenyDelete = &value
	return b
}

// WithDenyPurge sets the DenyPurge field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DenyPurge field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithDenyPurge(value bool) *StreamSpecApplyConfiguration {
	b.DenyPurge = &value
	return b
}

// WithAllowDirect sets the AllowDirect field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowDirect field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithAllowDirect(value bool) *StreamSpecApplyConfiguration {
	b.AllowDirect = &value
	return b
}

// WithAllowRollup sets the AllowRollup field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowRollup field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithAllowRollup(value bool) *StreamSpecApplyConfiguration {
	b.AllowRollup = &value
	return b
}

// WithMirrorDirect sets the MirrorDirect field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MirrorDirect field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithMirrorDirect(value bool) *StreamSpecApplyConfiguration {
	b.MirrorDirect = &value
	return b
}

// WithDiscardPerSubject sets the DiscardPerSubject field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DiscardPerSubject field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithDiscardPerSubject(value bool) *StreamSpecApplyConfiguration {
	b.DiscardPerSubject = &value
	return b
}

// WithFirstSequence sets the FirstSequence field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FirstSequence field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithFirstSequence(value uint64) *StreamSpecApplyConfiguration {
	b.FirstSequence = &value
	return b
}

// WithMetadata puts the entries into the Metadata field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Metadata field,
// overwriting an existing map entries in Metadata field with the same key.
func (b *StreamSpecApplyConfiguration) WithMetadata(entries map[string]string) *StreamSpecApplyConfiguration {
	if b.Metadata == nil && len(entries) > 0 {
		b.Metadata = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Metadata[k] = v
	}
	return b
}

// WithConsumerLimits sets the ConsumerLimits field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConsumerLimits field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithConsumerLimits(value *ConsumerLimitsApplyConfiguration) *StreamSpecApplyConfiguration {
	b.ConsumerLimits = value
	return b
}

// WithAllowMsgTTL sets the AllowMsgTTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowMsgTTL field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithAllowMsgTTL(value bool) *StreamSpecApplyConfiguration {
	b.AllowMsgTTL = &value
	return b
}

// WithSubjectDeleteMarkerTTL sets the SubjectDeleteMarkerTTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SubjectDeleteMarkerTTL field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithSubjectDeleteMarkerTTL(value string) *StreamSpecApplyConfiguration {
	b.SubjectDeleteMarkerTTL = &value
	return b
}

// WithAllowMsgCounter sets the AllowMsgCounter field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowMsgCounter field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithAllowMsgCounter(value bool) *StreamSpecApplyConfiguration {
	b.AllowMsgCounter = &value
	return b
}

// WithAllowAtomicPublish sets the AllowAtomicPublish field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowAtomicPublish field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithAllowAtomicPublish(value bool) *StreamSpecApplyConfiguration {
	b.AllowAtomicPublish = &value
	return b
}

// WithAllowMsgSchedules sets the AllowMsgSchedules field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowMsgSchedules field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithAllowMsgSchedules(value bool) *StreamSpecApplyConfiguration {
	b.AllowMsgSchedules = &value
	return b
}

// WithPersistMode sets the PersistMode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PersistMode field is set to the value of the last call.
func (b *StreamSpecApplyConfiguration) WithPersistMode(value string) *StreamSpecApplyConfiguration {
	b.PersistMode = &value
	return b
}
