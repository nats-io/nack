// Copyright 2025 The NATS Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta2

// UserApplyConfiguration represents a declarative configuration of the User type for use
// with apply.
type UserApplyConfiguration struct {
	User     *string                      `json:"user,omitempty"`
	Password *string                      `json:"password,omitempty"`
	Secret   *SecretRefApplyConfiguration `json:"secret,omitempty"`
}

// UserApplyConfiguration constructs a declarative configuration of the User type for use with
// apply.
func User() *UserApplyConfiguration {
	return &UserApplyConfiguration{}
}

// WithUser sets the User field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the User field is set to the value of the last call.
func (b *UserApplyConfiguration) WithUser(value string) *UserApplyConfiguration {
	b.User = &value
	return b
}

// WithPassword sets the Password field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Password field is set to the value of the last call.
func (b *UserApplyConfiguration) WithPassword(value string) *UserApplyConfiguration {
	b.Password = &value
	return b
}

// WithSecret sets the Secret field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secret field is set to the value of the last call.
func (b *UserApplyConfiguration) WithSecret(value *SecretRefApplyConfiguration) *UserApplyConfiguration {
	b.Secret = value
	return b
}
